# -*- coding: utf-8 -*-
"""DL + w2v

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OKm46CoE1fJWROGOoZa89R11Dv82mBUS
"""

from google.colab import drive
drive.mount("/content/gdrive")

import sys
sys.path.append('/content/gdrive/MyDrive/aml_fp/')

import json
import csv
import pandas as pd
import sklearn
import numpy as np
import tensorflow as tf
import pandas
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasRegressor
from keras.losses import mean_squared_error
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from tensorflow.keras.callbacks import EarlyStopping

import tensorflow.keras.backend as K

# Loading tfidf + categorical features
X_train=pd.read_csv("/content/gdrive/MyDrive/aml_fp/X_train_150_w2v")
y_train=pd.read_csv("/content/gdrive/MyDrive/aml_fp/y_train_150_w2v")
X_test=pd.read_csv("/content/gdrive/MyDrive/aml_fp/X_test_150_w2v")
y_test=pd.read_csv("/content/gdrive/MyDrive/aml_fp/y_test_150_w2v")

# Normal price 
y_train=y_train.iloc[:,1:]
y_test=y_test.iloc[:,1:]

# Log scaled price 
y_train_log=np.log(y_train+1)
y_test_log=np.log(y_test+1)

# Deep Learning model architecture
 
model = Sequential()
model.add(Dense(256, input_dim=X_train.shape[1],  activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(1))
optimizer = tf.keras.optimizers.Adam(lr=0.00001)
model.compile(loss='mean_squared_error', optimizer=optimizer,metrics=[tf.keras.metrics.MeanSquaredLogarithmicError(name="mean_squared_logarithmic_error")])

# Evaluating model on normal scaled price scale

model.fit(X_train,y_train, validation_split=0.2, batch_size=32, epochs=10)
model.evaluate(X_test,y_test)

# Evaluating model on log scaled price scale

model.fit(X_train,y_train_log, validation_split=0.2, batch_size=64, epochs=10)
model.evaluate(X_test,y_test_log)