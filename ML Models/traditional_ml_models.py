# -*- coding: utf-8 -*-
"""Traditional ML models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EB8_f9aSn0au3pxUj4NGVSBoISEe16NZ
"""

import pandas as pd
import numpy as np
from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler

# Load Data
tfidf = pd.read_csv('df_train_tfidf.csv')
category_train = pd.read_csv('df_train_category.csv')
tfidf_test = pd.read_csv('df_test_tfidf.csv')
category_test = pd.read_csv('df_test_category.csv')
w2v = pd.read_csv('df_train_w2v_150.csv')
w2v_test = pd.read_csv('df_test_w2v_150.csv')
bert = pd.read_json('train_small_embeddings.json')
bert_test = pd.read_json('test_embeddings_new.json')

# Special Treatment for Bert Data
bert_final = bert.drop(0)
bert_final.reset_index(inplace=True)
del bert_final['index']

# Form Train and Test Data
price_train = category_train.iloc[:,-1]
price_test = category_test.iloc[:,-1]
del category_train['price']
del category_train['Unnamed: 0']
del category_test['price']
del category_test['Unnamed: 0']
del w2v['Unnamed: 0']
del w2v_test['Unnamed: 0']
del tfidf['Unnamed: 0']
del tfidf_test['Unnamed: 0']

w2v_train_total = pd.concat([category_train,w2v], axis=1)
tfidf_train_total = pd.concat([category_train,tfidf], axis=1)
bert_train_total = pd.concat([category_train,bert_final], axis=1)
w2v_test_total = pd.concat([category_test,w2v_test], axis=1)
tfidf_test_total = pd.concat([category_test,tfidf_test], axis=1)
bert_test_total = pd.concat([category_test,bert_test], axis=1)

super_train = pd.concat([category_train, w2v, tfidf, bert_final], axis=1)
super_test = pd.concat([category_test, w2v_test, tfidf_test, bert_test], axis=1)

# Normalized Price
scaler = MinMaxScaler()
modified_price_train = pd.Series.to_numpy(price_train)
modified_price_train = modified_price_train.reshape(-1,1)
normalized_price_train = scaler.fit_transform(modified_price_train)

# Log Price
log_price_train = np.log(price_train)
positive_min = min(i for i in log_price_train if i > 0)
log_price_train[np.where(log_price_train < 0)[0]] = positive_min

def Linear(train_data, test_data, data_type):
    pipe = make_pipeline(LinearRegression())
    pipe.fit(train_data, price_train)
    predict = pipe.predict(test_data)
    positive_min = min(i for i in predict if i > 0)
    predict[np.where(predict < 0)[0]] = positive_min
    print("MSLE (Linear + " + data_type + "): ", metrics.mean_squared_log_error(price_test, predict))


Linear(category_train,category_test, 'category')
Linear(w2v_train_total, w2v_test_total, 'w2v')
Linear(tfidf_train_total, tfidf_test_total, 'tfidf')
Linear(bert_train_total, bert_test_total, 'bert')
Linear(super_train, super_test, 'super')

def Linear_log(train_data, test_data, data_type):
    pipe = make_pipeline(LinearRegression())
    pipe.fit(train_data, log_price_train)
    predict = pipe.predict(test_data)
    predict_return = np.exp(predict)
    positive_min = min(i for i in predict_return if i > 0)
    predict_return[np.where(predict_return < 0)[0]] = positive_min
    print("MSLE (XGBoost + log Label + " + data_type + "):", metrics.mean_squared_log_error(price_test, predict_return))

Linear_log(category_train,category_test, 'category')
Linear_log(w2v_train_total, w2v_test_total, 'w2v')
Linear_log(tfidf_train_total, tfidf_test_total, 'tfidf')
Linear_log(bert_train_total, bert_test_total, 'bert')

def XG(train_data, test_data, data_type):
    pipe = make_pipeline(XGBRegressor(random_state = 42))
    pipe.fit(train_data, price_train)
    predict = pipe.predict(test_data)
    positive_min = min(i for i in predict if i > 0)
    predict[np.where(predict < 0)[0]] = positive_min
    print("MSLE (XGBoost + " + data_type + "):", metrics.mean_squared_log_error(price_test, predict))



XG(category_train,category_test, 'category')
XG(w2v_train_total, w2v_test_total, 'w2v')
XG(tfidf_train_total, tfidf_test_total, 'tfidf')
XG(bert_train_total, bert_test_total, 'bert')
XG(super_train, super_test, 'super')

def XG_Normalized(train_data, test_data, data_type):
    pipe = make_pipeline(XGBRegressor(random_state = 42))
    pipe.fit(train_data, normalized_price_train)
    predict = pipe.predict(test_data)
    predict = predict.reshape(-1,1)
    predict_return = scaler.inverse_transform(predict)
    positive_min = min(i for i in predict_return if i > 0)
    predict_return[np.where(predict_return < 0)[0]] = positive_min
    print("MSLE (XGBoost + normalized Label + " + data_type + "):", metrics.mean_squared_log_error(price_test, predict_return))

XG_Normalized(category_train,category_test, 'category')
XG_Normalized(w2v_train_total, w2v_test_total, 'w2v')
XG_Normalized(tfidf_train_total, tfidf_test_total, 'tfidf')
XG_Normalized(bert_train_total, bert_test_total, 'bert')
XG_Normalized(super_train, super_test, 'super')

def XG_log(train_data, test_data, data_type):
    pipe = make_pipeline(XGBRegressor(random_state = 42))
    pipe.fit(train_data, log_price_train)
    predict = pipe.predict(test_data)
    predict_return = np.exp(predict)
    positive_min = min(i for i in predict_return if i > 0)
    predict_return[np.where(predict_return < 0)[0]] = positive_min
    print("MSLE (XGBoost + log Label + " + data_type + "):", metrics.mean_squared_log_error(price_test, predict_return))

XG_log(category_train,category_test, 'category')
XG_log(w2v_train_total, w2v_test_total, 'w2v')
XG_log(tfidf_train_total, tfidf_test_total, 'tfidf')
XG_log(bert_train_total, bert_test_total, 'bert')
XG_log(super_train, super_test, 'super')

def RandomForest(train_data, test_data, data_type):
    pipe = make_pipeline(RandomForestRegressor(random_state = 42, max_depth=5, n_jobs = -1))
    pipe.fit(train_data, price_train)
    predict = pipe.predict(test_data)
    positive_min = min(i for i in predict if i > 0)
    predict[np.where(predict < 0)[0]] = positive_min
    print("MSLE (Random Forest + " + data_type + "): ", metrics.mean_squared_log_error(price_test, predict))

RandomForest(category_train,category_test, 'category')
RandomForest(w2v_train_total, w2v_test_total, 'w2v')
RandomForest(tfidf_train_total, tfidf_test_total, 'tfidf')
RandomForest(bert_train_total, bert_test_total, 'bert')
RandomForest(super_train, super_test, 'super')

def RandomForest_Normalized(train_data, test_data, data_type):
    pipe = make_pipeline(RandomForestRegressor(random_state = 42, max_depth=5, n_jobs = -1))
    pipe.fit(train_data, normalized_price_train)
    predict = pipe.predict(test_data)
    predict = predict.reshape(-1,1)
    predict_return = scaler.inverse_transform(predict)
    positive_min = min(i for i in predict_return if i > 0)
    predict_return[np.where(predict_return < 0)[0]] = positive_min
    print("MSLE (Random Forest + normalized Label + " + data_type + "): ", metrics.mean_squared_log_error(price_test, predict_return))

RandomForest_Normalized(category_train,category_test, 'category')
RandomForest_Normalized(w2v_train_total, w2v_test_total, 'w2v')
RandomForest_Normalized(tfidf_train_total, tfidf_test_total, 'tfidf')
RandomForest_Normalized(bert_train_total, bert_test_total, 'bert')
RandomForest_Normalized(super_train, super_test, 'super')

def RandomForest_log(train_data, test_data, data_type):
    pipe = make_pipeline(RandomForestRegressor(random_state = 42,  max_depth=5, n_jobs = -1))
    pipe.fit(train_data, log_price_train)
    predict = pipe.predict(test_data)
    predict_return = np.exp(predict)
    positive_min = min(i for i in predict_return if i > 0)
    predict_return[np.where(predict_return < 0)[0]] = positive_min
    print("MSLE (Random Forest + log Label + " + data_type + "):", metrics.mean_squared_log_error(price_test, predict_return))

RandomForest_log(category_train,category_test, 'category')
RandomForest_log(w2v_train_total, w2v_test_total, 'w2v')
RandomForest_log(tfidf_train_total, tfidf_test_total, 'tfidf')
RandomForest_log(bert_train_total, bert_test_total, 'bert')
RandomForest_log(super_train, super_test, 'super')